{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://dashscope-chatbot/./src/script.js"],"sourcesContent":["// Access environment variables in client-side JS through webpack\n// These will be injected at build time\n\n// Session check at the start of the file\nfunction checkSession() {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    \n    if (!token || !user) {\n        window.location.href = 'account.html';\n        return false;\n    }\n    return true;\n}\n\n// Run session check immediately\nif (!checkSession()) {\n    // Stop further script execution if not authenticated\n    throw new Error('Not authenticated');\n}\n\n// Global variables\nlet conversations = [];\nlet currentConversationId = null;\n\n// Function to ensure a URL is properly formatted\nfunction formatUrl(url, defaultPort = 5101) {\n    // Determine the base URL based on where the app is running\n    const hostname = window.location.hostname;\n    \n    // Default API endpoint path\n    const apiEndpoint = '/api/chat';\n    \n    // Dynamic base URL determination\n    let baseUrl;\n    \n    if (hostname === 'baktipm.com') {\n        // We're running on the production domain\n        baseUrl = 'https://baktipm.com';\n        console.log('Running on baktipm.com domain, using:', baseUrl + apiEndpoint);\n        return baseUrl + apiEndpoint;\n    } else if (hostname === 'localhost' || hostname === '127.0.0.1') {\n        // We're running locally\n        baseUrl = `http://localhost:${defaultPort}`;\n        console.log('Running locally, using:', baseUrl + apiEndpoint);\n        return baseUrl + apiEndpoint;\n    }\n    \n    // If we got here, we're using a custom URL provided as an argument\n    if (!url) return `http://localhost:${defaultPort}/api/chat`;\n    \n    // Make sure URL has protocol\n    let formattedUrl = url;\n    if (!formattedUrl.startsWith('http')) {\n        formattedUrl = 'http://' + formattedUrl;\n    }   \n    \n    // Make sure localhost URLs include port\n    if (formattedUrl.includes('localhost') && !formattedUrl.includes(`:${defaultPort}`)) {\n        formattedUrl = formattedUrl.replace('localhost', `localhost:${defaultPort}`);\n    }\n    \n    console.log('Using custom URL:', formattedUrl);\n    return formattedUrl;\n}\n\n// Configuration object for API\nconst config = {\n    // Access environment variables through process.env (injected by webpack)\n    port: process.env.PORT || 5101,\n    apiUrl: formatUrl(process.env.API_URL, 5101),\n    dashscopeApiKey: process.env.DASHSCOPE_API_KEY,\n    dashscopeUrl: process.env.DASHSCOPE_URL,\n    // Determine the best proxyUrl based on hostname\n    proxyUrl: window.location.hostname === 'baktipm.com' \n        ? 'https://baktipm.com/api/chat' \n        : formatUrl(process.env.PROXY_URL, 5101)\n};\n\n// Create axios instance with default config\nconst api = axios.create({\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n});\n\n// DOM Elements\nconst chatContainer = document.getElementById('chat-container');\nconst chatMessages = document.getElementById('chat-messages');\nconst userInput = document.getElementById('user-input');\nconst sendButton = document.getElementById('send-button');\nconst chatHistory = document.getElementById('chat-history');\nconst conversationList = document.getElementById('conversation-list');\nconst historyList = document.getElementById('history-list');\nconst emptyHistory = document.getElementById('empty-history');\nconst newChatButton = document.getElementById('new-chat');\nconst connectionStatus = document.getElementById('connection-status');\nconst menuToggle = document.getElementById('menu-toggle');\nconst closeSidebar = document.getElementById('close-sidebar');\nconst loadingElement = document.getElementById('loading');\nconst themeToggle = document.getElementById('theme-toggle');\nconst themeIcon = themeToggle ? themeToggle.querySelector('i') : null;\nconst userButton = document.getElementById('user-button');\nconst userDropdown = document.getElementById('user-dropdown');\nconst userAvatar = document.getElementById('user-avatar');\nconst userName = document.getElementById('user-name');\nconst dropdownUserName = document.getElementById('dropdown-user-name');\nconst userEmail = document.getElementById('user-email');\nconst loginButton = document.getElementById('login-button');\nconst logoutButton = document.getElementById('logout-button');\nconst clearHistoryButton = document.getElementById('clear-history');\n\n// Log DOM elements to console\n// console.log('DOM Elements loaded:', {\n//     chatMessages,\n//     userInput,\n//     sendButton,\n//     connectionStatus,\n//     historyList,\n//     newChatButton,\n//     clearHistoryButton,\n//     emptyHistory,\n//     themeToggle,\n//     themeIcon,\n//     userButton,\n//     userDropdown,\n//     loginButton,\n//     logoutButton,\n//     userAvatar,\n//     userName,\n//     dropdownUserName,\n//     userEmail\n// });\n\n// Function to generate a UUID v4 that's compatible with the backend\nfunction generateId() {\n    // RFC4122 UUID v4 implementation\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\n// Function to format timestamp\nfunction formatTimestamp(date) {\n    const now = new Date();\n    const messageDate = new Date(date);\n    \n    // If today, show time\n    if (messageDate.toDateString() === now.toDateString()) {\n        return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    }\n    \n    // If this year, show month and day\n    if (messageDate.getFullYear() === now.getFullYear()) {\n        return messageDate.toLocaleDateString([], { month: 'short', day: 'numeric' });\n    }\n    \n    // Otherwise show full date\n    return messageDate.toLocaleDateString([], { year: 'numeric', month: 'short', day: 'numeric' });\n}\n\n// Function to create a new conversation\nfunction createNewConversation() {\n    const conversation = {\n        id: generateId(),\n        messages: [],\n        timestamp: new Date(),\n        preview: '',\n        topic: 'New Chat'  // Default topic\n    };\n    conversations.unshift(conversation);\n    currentConversationId = conversation.id;\n    saveConversations();\n    updateHistoryList();\n    clearChat();\n\n    // Add welcome message\n    const welcomeMessage = \"👋 Hello! I'm your AI assistant. How can I help you today?\";\n    \n    // Check if the conversation already has messages or if welcome message already exists\n    const hasWelcomeMessage = conversation.messages.some(\n        msg => msg.role === 'assistant' && msg.content === welcomeMessage\n    );\n\n    // Get the current index of this conversation in the array\n    const currentIndex = conversations.findIndex(c => c.id === conversation.id);\n    // console.log(`Current conversation index: ${currentIndex}`);\n\n    if (conversation.messages.length === 0 && !hasWelcomeMessage) {\n        addMessage(welcomeMessage, false);\n        conversation.messages.push({ role: 'assistant', content: welcomeMessage });\n        conversation.preview = welcomeMessage;\n    }\n    saveConversations();\n    updateHistoryList();\n\n    return conversation;\n}\n\n// Function to generate topic from messages\nfunction generateTopic(messages) {\n    if (messages.length === 0) return 'New Chat';\n    // Get the first user message as the topic\n    const firstMessage = messages.find(m => m.role === 'user');\n    if (!firstMessage) return 'New Chat';\n    \n    // Truncate the message to create a topic\n    const topic = firstMessage.content.split('\\n')[0].trim();\n    return topic.length > 40 ? topic.substring(0, 37) + '...' : topic;\n}\n\n// Function to update conversation topic\nfunction updateConversationTopic(conversationId) {\n    const conversation = conversations.find(c => c.id === conversationId);\n    if (conversation) {\n        conversation.topic = generateTopic(conversation.messages);\n        saveConversations();\n        updateHistoryList();\n    }\n}\n\n// Function to clear chat messages\nfunction clearChat() {\n    chatMessages.innerHTML = '';\n    userInput.value = '';\n    userInput.focus();\n}\n\n// Function to save conversations to localStorage\nfunction saveConversations() {\n    localStorage.setItem('conversations', JSON.stringify(conversations));\n    toggleEmptyState();\n}\n\n// Function to validate UUID v4 format\nfunction isValidUUIDv4(id) {\n    const uuidV4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidV4Regex.test(id);\n}\n\n// Function to load saved conversations from localStorage\nfunction loadConversations() {\n    const saved = localStorage.getItem('conversations');\n    if (saved) {\n        conversations = JSON.parse(saved);\n        \n        // Check if any conversations use old ID format and migrate them\n        let needsMigration = false;\n        conversations.forEach(conv => {\n            if (!isValidUUIDv4(conv.id)) {\n                // If not a valid UUID v4, generate a new one\n                console.log(`Converting old conversation ID ${conv.id} to UUID format`);\n                conv.id = generateId();\n                needsMigration = true;\n            }\n        });\n        \n        // Save back if we made changes\n        if (needsMigration) {\n            console.log('Saving migrated conversation IDs');\n            localStorage.setItem('conversations', JSON.stringify(conversations));\n        }\n        \n        // Set current conversation to the most recent one, if available\n        if (conversations.length > 0) {\n            currentConversationId = conversations[0].id;\n            \n            // Convert stored timestamps back to Date objects\n            conversations.forEach(conv => {\n                conv.timestamp = new Date(conv.timestamp);\n            });\n        }\n    } else {\n        conversations = [];\n    }\n    \n    updateHistoryList();\n    toggleEmptyState();\n}\n\n// Function to toggle empty state\nfunction toggleEmptyState() {\n    if (conversations.length === 0) {\n        emptyHistory.style.display = 'flex';\n    } else {\n        emptyHistory.style.display = 'none';\n    }\n}\n\n// Function to delete conversation\nfunction deleteConversation(id, event) {\n    event.stopPropagation();\n    if (confirm('Are you sure you want to delete this conversation?')) {\n        conversations = conversations.filter(c => c.id !== id);\n        if (id === currentConversationId) {\n            currentConversationId = conversations.length > 0 ? conversations[0].id : null;\n            if (currentConversationId) {\n                loadConversation(currentConversationId);\n            } else {\n                clearChat();\n            }\n        }\n        saveConversations();\n        updateHistoryList();\n    }\n}\n\n// Function to update the history list UI\nfunction updateHistoryList() {\n    historyList.innerHTML = '';\n    \n    if (conversations.length === 0) {\n        historyList.appendChild(emptyHistory);\n        emptyHistory.style.display = 'flex';\n    } else {\n        emptyHistory.style.display = 'none';\n        conversations.forEach(conv => {\n            const item = document.createElement('div');\n            item.className = 'history-item';\n            if (conv.id === currentConversationId) {\n                item.classList.add('active');\n                // console.log('Current conversation:', conv);\n            }\n            \n            const header = document.createElement('div');\n            header.className = 'history-item-header';\n            \n            const topic = document.createElement('div');\n            topic.className = 'topic';\n            topic.textContent = conv.topic || 'New Chat';\n            \n            const timestamp = document.createElement('div');\n            timestamp.className = 'timestamp';\n            timestamp.textContent = formatTimestamp(conv.timestamp);\n            \n            const preview = document.createElement('div');\n            preview.className = 'preview';\n            preview.textContent = conv.preview || 'Empty conversation';\n            \n            const actions = document.createElement('div');\n            actions.className = 'actions';\n            \n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'delete-btn';\n            deleteBtn.innerHTML = '<i class=\"ri-delete-bin-line\"></i>';\n            deleteBtn.title = 'Delete conversation';\n            deleteBtn.onclick = (e) => deleteConversation(conv.id, e);\n            \n            header.appendChild(topic);\n            header.appendChild(deleteBtn);\n            \n            item.appendChild(header);\n            item.appendChild(timestamp);\n            item.appendChild(preview);\n            \n            item.addEventListener('click', () => loadConversation(conv.id));\n            historyList.appendChild(item);\n        });\n    }\n}\n\n// Function to load a specific conversation\nfunction loadConversation(conversationId) {\n    currentConversationId = conversationId;\n    const conversation = conversations.find(c => c.id === conversationId);\n    if (conversation) {\n        chatMessages.innerHTML = '';\n        conversation.messages.forEach(msg => {\n            addMessage(msg.content, msg.role === 'user', false);\n        });\n        updateHistoryList();\n    }\n}\n\n// Function to update connection status\nfunction updateConnectionStatus(message, type = '') {\n    // Status update handling\n    connectionStatus.textContent = message;\n    connectionStatus.className = 'connection-status ' + type;\n}\n\n// Configure marked with options\nmarked.setOptions({\n    highlight: function(code, lang) {\n        const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n        return hljs.highlight(code, { language }).value;\n    },\n    langPrefix: 'hljs language-',\n    gfm: true,\n    breaks: true\n});\n\n// Function to create a message element\nfunction createMessageElement(content, isUser) {\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;\n\n    const avatarDiv = document.createElement('div');\n    avatarDiv.className = 'avatar';\n    avatarDiv.innerHTML = isUser ? '<i class=\"ri-user-line\"></i>' : '<i class=\"ri-robot-line\"></i>';\n\n    const contentDiv = document.createElement('div');\n    contentDiv.className = 'message-content';\n    \n    if (isUser) {\n        contentDiv.textContent = content;\n    } else {\n        // For bot messages, render as Markdown\n        contentDiv.innerHTML = marked.parse(content);\n        // Highlight any code blocks\n        contentDiv.querySelectorAll('pre code').forEach((block) => {\n            hljs.highlightBlock(block);\n        });\n    }\n\n    messageDiv.appendChild(avatarDiv);\n    messageDiv.appendChild(contentDiv);\n\n    return { messageDiv, contentDiv };\n}\n\n// Function to add a message to the chat\nfunction addMessage(content, isUser, save = true) {\n    const { messageDiv, contentDiv } = createMessageElement(content, isUser);\n    chatMessages.appendChild(messageDiv);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n    \n    if (save) {\n        if (!currentConversationId) {\n            createNewConversation();\n        }\n        \n        const conversation = conversations.find(c => c.id === currentConversationId);\n        if (conversation) {\n            conversation.messages.push({ role: isUser ? 'user' : 'assistant', content });\n            conversation.preview = content;\n            conversation.timestamp = new Date();\n            // Update topic after adding first user message\n            if (isUser && conversation.messages.filter(m => m.role === 'user').length === 1) {\n                updateConversationTopic(currentConversationId);\n            }\n            saveConversations();\n            updateHistoryList();\n        }\n    }\n}\n\n// Function to show typing indicator\nfunction showTypingIndicator() {\n    // Show typing indicator\n    const typingDiv = document.createElement('div');\n    typingDiv.className = 'typing-indicator';\n    typingDiv.id = 'typing-indicator';\n    \n    const avatar = document.createElement('div');\n    avatar.className = 'message-avatar';\n    avatar.innerHTML = '<i class=\"ri-robot-line\"></i>';\n    \n    const bubble = document.createElement('div');\n    bubble.className = 'typing-bubble';\n    \n    for (let i = 0; i < 3; i++) {\n        const dot = document.createElement('div');\n        dot.className = 'typing-dot';\n        bubble.appendChild(dot);\n    }\n    \n    typingDiv.appendChild(avatar);\n    typingDiv.appendChild(bubble);\n    chatMessages.appendChild(typingDiv);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n}\n\n// Function to remove typing indicator\nfunction removeTypingIndicator() {\n    // Remove typing indicator\n    const typingIndicator = document.getElementById('typing-indicator');\n    if (typingIndicator) {\n        typingIndicator.remove();\n    }\n}\n\n// Function to send message to API\nasync function sendToAPI(message) {\n    try {\n        // Send message to API\n        updateConnectionStatus('Connecting...', '');\n        \n        // The config.proxyUrl is already formatted with the formatUrl utility\n        const apiEndpoint = config.proxyUrl;\n        \n        // Get authentication token\n        const token = localStorage.getItem('token');\n        if (!token) {\n            throw new Error('Authentication required. Please login again.');\n        }\n        \n        // Create event source for streaming\n        const response = await fetch(apiEndpoint, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({ \n                message,\n                conversationId: currentConversationId // Include conversation ID in the request\n            })\n        });\n\n        // Create a reader to read the stream\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let buffer = '';\n\n        updateConnectionStatus('Connected', 'connected');\n\n        // Return a promise that resolves with an array of all responses\n        return new Promise(async (resolve, reject) => {\n            try {\n                let fullResponse = '';\n                \n                while (true) {\n                    const { done, value } = await reader.read();\n                    \n                    if (done) {\n                        break;\n                    }\n\n                    // Decode the chunk and add to buffer\n                    buffer += decoder.decode(value, { stream: true });\n                    \n                    // Process complete events\n                    let newlineIndex;\n                    while ((newlineIndex = buffer.indexOf('\\n\\n')) !== -1) {\n                        const event = buffer.slice(0, newlineIndex);\n                        buffer = buffer.slice(newlineIndex + 2);\n\n                        // Parse the event\n                        const lines = event.split('\\n');\n                        for (const line of lines) {\n                            if (!line.startsWith('data:')) continue;\n                            \n                            const data = line.slice(5).trim();\n                            if (!data) continue;\n                            \n                            if (data === '[DONE]') {\n                                resolve({\n                                    choices: [{\n                                        message: {\n                                            content: fullResponse\n                                        }\n                                    }]\n                                });\n                                return;\n                            }\n\n                            try {\n                                const parsedData = JSON.parse(data);\n                                if (parsedData.error) {\n                                    throw new Error(parsedData.error);\n                                }\n                                // Handle different API response formats\n                                let content = '';\n                                \n                                // Check for different response formats\n                                if (parsedData.choices?.[0]?.message?.content) {\n                                    // OpenAI-like format\n                                    content = parsedData.choices[0].message.content;\n                                } else if (parsedData.output?.text) {\n                                    // DashScope format\n                                    content = parsedData.output.text;\n                                } else if (parsedData.text) {\n                                    // Simple format\n                                    content = parsedData.text;\n                                } else if (parsedData.content) {\n                                    // Another common format\n                                    content = parsedData.content;\n                                } else {\n                                    // Handle unknown response format\n                                    // Try to extract any string we can find\n                                    content = JSON.stringify(parsedData);\n                                }\n                                \n                                if (content && content.trim()) {\n                                    fullResponse += content;\n                                    // Emit partial response for real-time updates\n                                    window.dispatchEvent(new CustomEvent('partialResponse', {\n                                        detail: { content }\n                                    }));\n                                }\n                            } catch (e) {\n                                if (!data.startsWith('id:')) {  // Ignore ID lines\n                                    // Silently handle parsing errors\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (error) {\n                reject(error);\n            }\n        });\n    } catch (error) {\n        // Handle API errors silently\n        // Update UI with error message\n        updateConnectionStatus(`Error: ${error.response?.data?.message || error.message}`, 'error');\n        throw error;\n    }\n}\n\n// Function to handle sending messages\nasync function handleSendMessage() {\n    const message = userInput.value.trim();\n    if (!message) {\n        alert(\"Please enter a message before sending.\");\n        return;\n    }\n    \n    // Check if we have a current conversation, if not create one\n    if (!currentConversationId || !conversations.find(c => c.id === currentConversationId)) {\n        // Create a new conversation automatically\n        const newConversation = createNewConversation();\n        currentConversationId = newConversation.id;\n    }\n    \n    // Process new message\n    \n    // Clear input\n    userInput.value = '';\n\n    // Add user message to chat\n    addMessage(message, true);\n\n    // Show typing indicator\n    showTypingIndicator();\n\n    try {\n        // Remove typing indicator before creating new message\n        removeTypingIndicator();\n\n        // Create a temporary message element for streaming updates\n        const tempMessageId = 'temp-' + Date.now();\n        const { messageDiv, contentDiv } = createMessageElement('', false);\n        contentDiv.id = tempMessageId;\n        chatMessages.appendChild(messageDiv);\n        chatMessages.scrollTop = chatMessages.scrollHeight;\n\n        let accumulatedMarkdown = '';\n\n        // Listen for partial responses\n        const handlePartialResponse = (event) => {\n            const content = event.detail.content;\n            accumulatedMarkdown += content;\n            const messageElement = document.getElementById(tempMessageId);\n            \n            if (messageElement) {\n                messageElement.textContent = accumulatedMarkdown;\n                \n                try {\n                    messageElement.innerHTML = marked.parse(accumulatedMarkdown);\n                    messageElement.querySelectorAll('pre code').forEach((block) => {\n                        hljs.highlightBlock(block);\n                    });\n                } catch (e) {\n                    // Silent fail on markdown parsing errors\n                }\n                \n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            } else {\n                // Silent fail if element not found (element might not be in DOM yet)\n                // This prevents console error messages\n            }\n        };\n        window.addEventListener('partialResponse', handlePartialResponse);\n\n        // Send message to API\n        const response = await sendToAPI(message);\n        \n        // Remove event listener\n        window.removeEventListener('partialResponse', handlePartialResponse);\n\n        // Update the final message\n        // Extract the response content based on its format\n        let botResponse = '';\n        \n        if (response) {\n            // Process full API response\n            \n            // Handle different API response formats\n            if (response.choices && response.choices[0] && response.choices[0].message) {\n                // OpenAI-like format\n                botResponse = response.choices[0].message.content;\n            } else if (response.output && response.output.text) {\n                // DashScope format\n                botResponse = response.output.text;\n            } else if (response.text) {\n                // Simple format\n                botResponse = response.text;\n            } else if (response.content) {\n                // Another common format\n                botResponse = response.content;\n            } else {\n                // If we can't find a known format, use the accumulated markdown\n                botResponse = accumulatedMarkdown;\n            }\n            \n            // Use extracted bot response\n            \n            const messageElement = document.getElementById(tempMessageId);\n            if (messageElement) {\n                try {\n                    messageElement.innerHTML = marked.parse(botResponse);\n                    // Highlight any code blocks\n                    messageElement.querySelectorAll('pre code').forEach((block) => {\n                        hljs.highlightBlock(block);\n                    });\n                } catch (e) {\n                    // Silent fail on final markdown parsing error\n                    // Fallback to plain text\n                    messageElement.textContent = botResponse;\n                }\n            } else {\n                // Silent fail if element not found in final response handling\n                // This prevents console error messages\n            }\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n\n            // Save the bot's response to conversation history\n            const conversation = conversations.find(c => c.id === currentConversationId);\n            if (conversation) {\n                conversation.messages.push({ role: 'assistant', content: botResponse });\n                conversation.preview = botResponse;\n                conversation.timestamp = new Date();\n                saveConversations();\n                updateHistoryList();\n            }\n        } else {\n            throw new Error('Invalid API response format');\n        }\n    } catch (error) {\n        console.error('Chat error:', error);\n        removeTypingIndicator();\n        addMessage('Sorry, I encountered an error. Please try again later.', false);\n    }\n}\n\n// Function to clear all history\n// function clearAllHistory() {\n//     if (confirm('Are you sure you want to clear all chat history? This cannot be undone.')) {\n//         conversations = [];\n//         currentConversationId = null;\n//         localStorage.removeItem('conversations');\n//         clearChat();\n//         updateHistoryList();\n//         toggleEmptyState();\n//         // // Create a new conversation after clearing\n//         // createNewConversation();\n//     }\n// }\n\n// Theme management\nfunction getPreferredTheme() {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n        return savedTheme;\n    }\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n}\n\nfunction updateThemeIcon(theme) {\n    const isDark = theme === 'dark';\n    if (themeIcon) {\n        themeIcon.className = isDark ? 'ri-sun-line' : 'ri-moon-line';\n    }\n    if (themeToggle) {\n        themeToggle.setAttribute('title', `Switch to ${isDark ? 'light' : 'dark'} mode`);\n        themeToggle.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`);\n    }\n}\n\nfunction setTheme(theme, updateStorage = true) {\n    document.documentElement.style.setProperty('--transition-normal', 'none');\n    document.body.classList.remove('light-theme', 'dark-theme');\n    \n    requestAnimationFrame(() => {\n        document.body.classList.add(`${theme}-theme`);\n        document.documentElement.style.setProperty('--transition-normal', 'all 0.3s ease');\n        \n        if (updateStorage) {\n            localStorage.setItem('theme', theme);\n        }\n        \n        updateThemeIcon(theme);\n    });\n}\n\n// Initialize theme\nconst initialTheme = getPreferredTheme();\nsetTheme(initialTheme, false);\n\n// Theme toggle event listener\naddSafeEventListener(themeToggle, 'click', () => {\n    const currentTheme = localStorage.getItem('theme') || getPreferredTheme();\n    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n    setTheme(newTheme);\n});\n\n// Watch for system theme changes\nconst mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\nif (mediaQuery) {\n    mediaQuery.addEventListener('change', (e) => {\n        if (!localStorage.getItem('theme')) {\n            setTheme(e.matches ? 'dark' : 'light', false);\n        }\n    });\n}\n\n// Mobile menu toggle\naddSafeEventListener(menuToggle, 'click', () => {\n    if (chatHistory) {\n        chatHistory.classList.toggle('show');\n    }\n});\n\n// Close sidebar button\naddSafeEventListener(closeSidebar, 'click', () => {\n    if (chatHistory) {\n        chatHistory.classList.remove('show');\n    }\n});\n\n// Close menu when clicking outside on mobile\ndocument.addEventListener('click', (e) => {\n    if (window.innerWidth <= 768) {\n        const isClickInsideHistory = chatHistory.contains(e.target);\n        const isClickOnToggle = menuToggle.contains(e.target);\n        \n        if (!isClickInsideHistory && !isClickOnToggle && chatHistory.classList.contains('show')) {\n            chatHistory.classList.remove('show');\n        }\n    }\n});\n\n// User Account Management\naddSafeEventListener(userButton, 'click', () => {\n    if (userDropdown) {\n        userDropdown.classList.toggle('hidden');\n    }\n});\n\n// Document-level event listener for click outside dropdown\nif (document) {\n    document.addEventListener('click', (e) => {\n        if (userButton && userDropdown && \n            !userButton.contains(e.target) && \n            !userDropdown.contains(e.target)) {\n            userDropdown.classList.add('hidden');\n        }\n    });\n}\n\n// Login button functionality\naddSafeEventListener(loginButton, 'click', () => {\n    window.location.href = 'account.html';\n});\n\n// Logout button functionality\naddSafeEventListener(logoutButton, 'click', () => {\n    if (confirm('Are you sure you want to sign out?')) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        updateUserInterface();\n        window.location.href = 'account.html';\n    }\n});\n\nfunction updateUserInterface() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    const isAuthenticated = !!localStorage.getItem('token');\n\n    if (isAuthenticated && user) {\n        // Update avatar\n        const avatarUrl = user.avatar || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=7c3aed&color=fff`;\n        userAvatar.src = avatarUrl;\n        document.querySelector('.user-info img').src = avatarUrl;\n\n        // Update name and email with safety checks\n        if (userName) userName.textContent = user.name;\n        if (dropdownUserName) dropdownUserName.textContent = user.name;\n        if (userEmail) userEmail.textContent = user.email;\n\n        // Show/hide buttons with safety checks\n        if (loginButton) loginButton.classList.add('hidden');\n        if (logoutButton) logoutButton.classList.remove('hidden');\n    } else {\n        // Reset to guest state\n        const guestAvatar = 'https://ui-avatars.com/api/?name=Guest&background=7c3aed&color=fff';\n        userAvatar.src = guestAvatar;\n        document.querySelector('.user-info img').src = guestAvatar;\n\n        userName.textContent = 'Guest';\n        dropdownUserName.textContent = 'Guest';\n        userEmail.textContent = 'Not signed in';\n\n        loginButton.classList.remove('hidden');\n        logoutButton.classList.add('hidden');\n    }\n}\n\nupdateUserInterface();\n\n// Helper function to safely add event listeners\nfunction addSafeEventListener(element, eventType, handler) {\n    if (element) {\n        element.addEventListener(eventType, handler);\n    } else {\n        console.error(`Element for event ${eventType} not found`);\n    }\n}\n\n// Event listeners - with safety checks\naddSafeEventListener(sendButton, 'click', handleSendMessage);\naddSafeEventListener(newChatButton, 'click', createNewConversation);\naddSafeEventListener(clearHistoryButton, 'click', clearAllHistory);\n\nif (userInput) {\n    userInput.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n            handleSendMessage();\n        }\n    });\n} else {\n    console.error('User input element not found');\n}\n\n// Function to clear all conversation history with confirmation\nfunction clearAllHistory() {\n    if (confirm('Are you sure you want to delete all conversation history? This action cannot be undone.')) {\n        const userId = getUserId();\n        \n        if (userId) {\n            // For logged in users, call API to delete conversations from database\n            fetch('/api/conversations/clear', {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                }\n            })\n            .then(response => {\n                if (response.ok) {\n                    // Clear local conversations\n                    conversations = [];\n                    saveConversations();\n                    updateHistoryList();\n                    createNewConversation(); // Create a fresh conversation\n                    return response.json();\n                }\n                throw new Error('Failed to clear conversation history');\n            })\n            .then(data => {\n                console.log('Cleared history:', data);\n            })\n            .catch(error => {\n                console.error('Error clearing history:', error);\n                alert('Failed to clear conversation history. Please try again.');\n            });\n        } else {\n            // For anonymous users, just clear local storage\n            conversations = [];\n            saveConversations();\n            updateHistoryList();\n            createNewConversation(); // Create a fresh conversation\n        }\n    }\n}\n\n// Helper function to get user ID if logged in\nfunction getUserId() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    return user ? user.id : null;\n}\n\n// Load conversations on startup\nloadConversations();\n\n// Add initial greeting only if there are no existing conversations\nif (conversations.length === 0) {\n    // Create a new conversation but prevent duplicate welcome messages\n    const newConversation = {\n        id: generateId(),\n        messages: [],\n        timestamp: new Date(),\n        preview: '',\n        topic: 'New Chat'\n    };\n    \n    conversations.unshift(newConversation);\n    currentConversationId = newConversation.id;\n    \n    // Add welcome message only once\n    const welcomeMessage = \"👋 Hello! I'm your AI assistant. How can I help you today?\";\n    addMessage(welcomeMessage, false);\n    newConversation.messages.push({ role: 'assistant', content: welcomeMessage });\n    newConversation.preview = welcomeMessage;\n    saveConversations();\n    updateHistoryList();\n    clearChat();\n}\n"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","enumerable","configurable","writable","_invoke","_createForOfIteratorHelper","Array","isArray","_arrayLikeToArray","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","_n","F","s","next","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","token","localStorage","getItem","user","window","location","href","Error","conversations","currentConversationId","formatUrl","url","baseUrl","defaultPort","undefined","hostname","apiEndpoint","console","log","concat","formattedUrl","startsWith","includes","replace","config","port","process","apiUrl","dashscopeApiKey","dashscopeUrl","proxyUrl","chatMessages","axios","headers","document","getElementById","userInput","sendButton","chatHistory","historyList","emptyHistory","newChatButton","connectionStatus","menuToggle","closeSidebar","themeToggle","themeIcon","querySelector","userButton","userDropdown","userAvatar","userName","dropdownUserName","userEmail","loginButton","logoutButton","clearHistoryButton","generateId","Math","random","createNewConversation","conversation","id","messages","timestamp","Date","preview","topic","unshift","saveConversations","updateHistoryList","clearChat","welcomeMessage","hasWelcomeMessage","some","msg","role","content","findIndex","addMessage","push","innerHTML","focus","setItem","JSON","stringify","toggleEmptyState","style","display","appendChild","forEach","conv","item","createElement","className","classList","add","header","textContent","date","now","messageDate","toDateString","toLocaleTimeString","hour","minute","getFullYear","toLocaleDateString","month","day","year","deleteBtn","title","onclick","stopPropagation","confirm","filter","loadConversation","addEventListener","conversationId","find","updateConnectionStatus","message","type","createMessageElement","isUser","messageDiv","avatarDiv","contentDiv","marked","parse","querySelectorAll","block","hljs","highlightBlock","save","_createMessageElement","scrollTop","scrollHeight","firstMessage","split","trim","substring","generateTopic","updateConversationTopic","showTypingIndicator","typingDiv","avatar","bubble","dot","removeTypingIndicator","typingIndicator","remove","sendToAPI","_x","_sendToAPI","_callee2","response","reader","decoder","buffer","_error$response","_t4","_context2","fetch","method","body","getReader","TextDecoder","_ref","_callee","reject","fullResponse","_yield$reader$read","newlineIndex","event","lines","_iterator","_step","line","data","_parsedData$choices","_parsedData$output","parsedData","_t2","_t3","_context","read","decode","stream","indexOf","choices","error","output","text","dispatchEvent","CustomEvent","detail","_x2","_x3","handleSendMessage","_handleSendMessage","_callee3","_newConversation","tempMessageId","_createMessageElement2","accumulatedMarkdown","handlePartialResponse","botResponse","messageElement","_t5","_context3","alert","newConversation","removeEventListener","getPreferredTheme","matchMedia","matches","setTheme","theme","updateStorage","documentElement","setProperty","requestAnimationFrame","isDark","setAttribute","updateThemeIcon","setOptions","highlight","code","lang","language","getLanguage","langPrefix","gfm","breaks","addSafeEventListener","mediaQuery","updateUserInterface","avatarUrl","encodeURIComponent","src","email","guestAvatar","element","eventType","handler","toggle","innerWidth","isClickInsideHistory","contains","target","isClickOnToggle","removeItem","userId","getUserId","ok","json","key","saved","needsMigration","loadConversations"],"sourceRoot":""}